{"ast":null,"code":"import _classCallCheck from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\_dev\\\\React\\\\charts\\\\src\\\\Components\\\\linechart.jsx\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nvar LineCHart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LineCHart, _Component);\n\n  function LineCHart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LineCHart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LineCHart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.DrawChart = function () {\n      var margin = {\n        top: 20,\n        right: 30,\n        bottom: 45,\n        left: 50\n      };\n      var width = _this.props.width - margin.left - margin.right;\n      var height = _this.props.height - margin.top - margin.bottom;\n      var parseTime = d3.timeParse('%d.%m.%Y');\n      var buffer = [];\n      var data = _this.props.data.data;\n      data.forEach(function (d, i) {\n        buffer.push(Object.values(d));\n        buffer[i][0] = parseTime(buffer[i][0]);\n\n        for (var j = 1; j < buffer[0].length; j++) {\n          if (typeof buffer[i][j] != 'number') {\n            buffer[i][j] = parseInt(buffer[i][j]);\n          }\n        }\n      });\n      console.log(buffer);\n      var x = d3.scaleTime().domain(d3.extent(buffer, function (d) {\n        return d[0];\n      })).range([0, width]);\n      var y = d3.scaleLinear().domain([0, d3.max(buffer, function (d) {\n        return d[1];\n      })]).range([height, 0]); // define the line\n\n      var line = d3.line().x(function (d) {\n        return x(d[0]);\n      }).y(function (d) {\n        return y(d[1]);\n      }).curve(d3.curveMonotoneX); // manipulate svg and create group\n\n      var svg = d3.select('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', \"translate(\".concat(margin.left, \",\").concat(margin.top, \")\")); // add the x axis\n\n      svg.append('g').attr('transform', \"translate(0,\".concat(height, \")\")).call(d3.axisBottom(x).tickFormat(d3.timeFormat(\"%d.%m.%Y\"))); // add the y axis\n\n      svg.append('g').call(d3.axisLeft(y));\n\n      var _loop = function _loop(i) {\n        var bufferline = [];\n        buffer.forEach(function () {\n          bufferline.push(buffer[0][i]);\n        });\n      };\n\n      for (var i = 1; i < buffer[0].length; i++) {\n        _loop(i);\n      } // add the line\n\n\n      svg.append('path').data([buffer]).attr('class', 'line').attr('d', line).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', '1.5');\n      svg.selectAll('circle').data(buffer).enter().append('circle').attr('class', 'dot').attr('cx', function (d) {\n        return x(d[0]);\n      }).attr('cy', function (d) {\n        return y(d[1]);\n      }).attr('r', '3').attr('fill', 'steelblue');\n    };\n\n    return _this;\n  }\n\n  _createClass(LineCHart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.DrawChart();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"svg\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return LineCHart;\n}(Component);\n\nexport { LineCHart as default };","map":{"version":3,"sources":["C:\\_dev\\React\\charts\\src\\Components\\linechart.jsx"],"names":["React","Component","d3","LineCHart","DrawChart","margin","top","right","bottom","left","width","props","height","parseTime","timeParse","buffer","data","forEach","d","i","push","Object","values","j","length","parseInt","console","log","x","scaleTime","domain","extent","range","y","scaleLinear","max","line","curve","curveMonotoneX","svg","select","attr","append","call","axisBottom","tickFormat","timeFormat","axisLeft","bufferline","selectAll","enter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport * as d3 from 'd3'\r\n\r\nexport default class LineCHart extends Component {\r\n\r\n  componentDidMount() {\r\n    this.DrawChart()\r\n  }\r\n\r\n  DrawChart = () => {\r\n    const margin = {top: 20, right: 30, bottom: 45, left: 50}\r\n    const width = this.props.width - margin.left - margin.right\r\n    const height = this.props.height - margin.top - margin.bottom\r\n\r\n    let parseTime = d3.timeParse('%d.%m.%Y')\r\n\r\n    let buffer = []\r\n    let data = this.props.data.data\r\n\r\n    data.forEach((d,i) => {\r\n      buffer.push(Object.values(d))\r\n      buffer[i][0] = parseTime(buffer[i][0])\r\n      for(let j = 1; j < buffer[0].length; j++){\r\n        if(typeof buffer[i][j] != 'number'){\r\n          buffer[i][j] = parseInt(buffer[i][j])\r\n        }\r\n      }\r\n    })\r\n\r\n    console.log(buffer)\r\n\r\n    let x = d3.scaleTime()\r\n      .domain(d3.extent(buffer, d => d[0]))\r\n      .range([0, width])\r\n\r\n\r\n    let y = d3.scaleLinear()\r\n      .domain([0, d3.max(buffer, d => d[1])])\r\n      .range([height, 0])\r\n\r\n    // define the line\r\n    let line = d3.line()\r\n      .x(d => x(d[0]))\r\n      .y(d => y(d[1]))\r\n      .curve(d3.curveMonotoneX)\r\n\r\n    // manipulate svg and create group\r\n    let svg = d3.select('svg')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform',\r\n            `translate(${margin.left},${margin.top})`)\r\n  \r\n    // add the x axis\r\n    svg.append('g')\r\n      .attr('transform', `translate(0,${height})`)\r\n      .call(d3.axisBottom(x).tickFormat(d3.timeFormat(\"%d.%m.%Y\")))\r\n  \r\n    // add the y axis\r\n    svg.append('g')\r\n      .call(d3.axisLeft(y))\r\n\r\n    \r\n\r\n    for(let i = 1; i < buffer[0].length; i++){\r\n      let bufferline = []\r\n      buffer.forEach(() => {\r\n        bufferline.push(buffer[0][i])\r\n      })\r\n    }\r\n    // add the line\r\n    svg.append('path')\r\n      .data([buffer])\r\n      .attr('class', 'line')\r\n      .attr('d', line)\r\n      .attr('fill', 'none')\r\n      .attr('stroke', 'steelblue')\r\n      .attr('stroke-width', '1.5')\r\n\r\n    svg.selectAll('circle')\r\n      .data(buffer).enter()\r\n      .append('circle')\r\n      .attr('class', 'dot')\r\n      .attr('cx', d => x(d[0]))\r\n      .attr('cy', d => y(d[1]))\r\n      .attr('r', '3')\r\n      .attr('fill', 'steelblue')\r\n    \r\n  }\r\n\r\n  render() {\r\n    return <svg></svg>\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}