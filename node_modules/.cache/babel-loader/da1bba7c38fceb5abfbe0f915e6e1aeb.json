{"ast":null,"code":"import _classCallCheck from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\_dev\\\\React\\\\charts\\\\src\\\\Components\\\\linechart.jsx\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nvar LineCHart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LineCHart, _Component);\n\n  function LineCHart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LineCHart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LineCHart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.DrawChart = function () {\n      var margin = {\n        top: 20,\n        right: 30,\n        bottom: 45,\n        left: 50\n      };\n      var width = _this.props.width - margin.left - margin.right;\n      var height = _this.props.height - margin.top - margin.bottom;\n      var parseTime = d3.timeParse('%d.%m.%Y');\n      var buffer = [];\n      var bufferline;\n      var maxX = 0;\n      var data = _this.props.data.data;\n      var keys = Object.keys(data[0]); //copy data object into array, \n\n      data.forEach(function (d, i) {\n        buffer.push(Object.values(d)); // format the date string into date type\n\n        buffer[i][0] = parseTime(buffer[i][0]);\n\n        for (var j = 1; j < buffer[0].length; j++) {\n          if (typeof buffer[i][j] != 'number') {\n            // number string into int\n            buffer[i][j] = parseInt(buffer[i][j]);\n\n            if (buffer[i][j] > maxX) {\n              maxX = buffer[i][j];\n            }\n          }\n        }\n      }); // manipulate svg and create group\n\n      var svg = d3.select('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', \"translate(\".concat(margin.left, \",\").concat(margin.top, \")\")); //splits data array into arrays\n      //e.g. array[date, value1, value2] = array[date, value1] & array[date, value2] \n\n      var _loop = function _loop(i) {\n        bufferline = [];\n\n        for (var j = 0; j < buffer.length; j++) {\n          var fusionArray = [];\n          fusionArray[0] = buffer[j][0];\n          fusionArray[1] = buffer[j][i];\n          bufferline.push(fusionArray);\n        }\n\n        var x = d3.scaleTime().domain(d3.extent(buffer, function (d) {\n          return d[0];\n        })).range([0, width]);\n        var y = d3.scaleLinear().domain([0, maxX]).range([height, 0]); // add the x axis\n\n        svg.append('g').attr('transform', \"translate(0,\".concat(height, \")\")).call(d3.axisBottom(x).tickFormat(d3.timeFormat(\"%d.%m.%Y\"))); // add the y axis\n\n        svg.append('g').call(d3.axisLeft(y)); // define the line\n\n        var line = d3.line().x(function (d) {\n          return x(d[0]);\n        }).y(function (d) {\n          return y(d[1]);\n        }).curve(d3.curveMonotoneX); // add the line\n\n        svg.append(\"g\").attr('class', 'lineContainer').append('path').data([bufferline]).attr('class', 'line').attr('d', line).attr('fill', 'none').attr('stroke', 'steelblue').attr('stroke-width', '1.5').on(\"mouseover\", function () {\n          svg.append('text').attr(\"class\", \"title\").text(\"hans\").attr(\"x\", width / 2).attr(\"y\", 5);\n        }).on(\"mouseout\", function () {\n          svg.select(\".title\").remove();\n        }); // add the dots  \n\n        svg.selectAll('.lineContainer').selectAll('circle').data(bufferline).enter().append('circle').attr('class', 'dot').attr('cx', function (d) {\n          return x(d[0]);\n        }).attr('cy', function (d) {\n          return y(d[1]);\n        }).attr('r', '3').attr('fill', 'steelblue');\n      };\n\n      for (var i = 1; i < buffer[0].length; i++) {\n        _loop(i);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(LineCHart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.DrawChart();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"svg\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return LineCHart;\n}(Component);\n\nexport { LineCHart as default };","map":{"version":3,"sources":["C:\\_dev\\React\\charts\\src\\Components\\linechart.jsx"],"names":["React","Component","d3","LineCHart","DrawChart","margin","top","right","bottom","left","width","props","height","parseTime","timeParse","buffer","bufferline","maxX","data","keys","Object","forEach","d","i","push","values","j","length","parseInt","svg","select","attr","append","fusionArray","x","scaleTime","domain","extent","range","y","scaleLinear","call","axisBottom","tickFormat","timeFormat","axisLeft","line","curve","curveMonotoneX","on","text","remove","selectAll","enter"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport * as d3 from 'd3'\r\n\r\nexport default class LineCHart extends Component {\r\n\r\n  componentDidMount() {\r\n    this.DrawChart()\r\n  }\r\n\r\n  DrawChart = () => {\r\n    const margin = {top: 20, right: 30, bottom: 45, left: 50}\r\n    const width = this.props.width - margin.left - margin.right\r\n    const height = this.props.height - margin.top - margin.bottom\r\n\r\n    let parseTime = d3.timeParse('%d.%m.%Y')\r\n\r\n    let buffer = []\r\n    let bufferline\r\n    let maxX = 0\r\n    let data = this.props.data.data\r\n\r\n    let keys = Object.keys(data[0])\r\n\r\n    //copy data object into array, \r\n    data.forEach((d,i) => {\r\n      buffer.push(Object.values(d))\r\n      // format the date string into date type\r\n      buffer[i][0] = parseTime(buffer[i][0])\r\n      for(let j = 1; j < buffer[0].length; j++){\r\n        if(typeof buffer[i][j] != 'number'){\r\n          // number string into int\r\n          buffer[i][j] = parseInt(buffer[i][j])\r\n          if(buffer[i][j] > maxX){\r\n            maxX = buffer[i][j]\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    // manipulate svg and create group\r\n    let svg = d3.select('svg')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform',\r\n            `translate(${margin.left},${margin.top})`)\r\n  \r\n    //splits data array into arrays\r\n    //e.g. array[date, value1, value2] = array[date, value1] & array[date, value2] \r\n    for(let i = 1; i < buffer[0].length; i++){\r\n      bufferline = []\r\n      for(let j = 0; j < buffer.length; j++){\r\n        let fusionArray = []\r\n        fusionArray[0] = buffer[j][0]\r\n        fusionArray[1] = buffer[j][i]\r\n        bufferline.push(fusionArray)\r\n      }\r\n\r\n      let x = d3.scaleTime()\r\n      .domain(d3.extent(buffer, d => d[0]))\r\n      .range([0, width])\r\n\r\n\r\n      let y = d3.scaleLinear()\r\n        .domain([0, maxX])\r\n        .range([height, 0])\r\n\r\n      // add the x axis\r\n      svg.append('g')\r\n        .attr('transform', `translate(0,${height})`)\r\n        .call(d3.axisBottom(x).tickFormat(d3.timeFormat(\"%d.%m.%Y\")))\r\n\r\n      // add the y axis\r\n      svg.append('g')\r\n        .call(d3.axisLeft(y))\r\n\r\n      // define the line\r\n      let line = d3.line()\r\n        .x(d => x(d[0]))\r\n        .y(d => y(d[1]))\r\n        .curve(d3.curveMonotoneX)\r\n      \r\n      // add the line\r\n      svg.append(\"g\")\r\n        .attr('class', 'lineContainer')\r\n        .append('path')\r\n        .data([bufferline])\r\n        .attr('class', 'line')\r\n        .attr('d', line)\r\n        .attr('fill', 'none')\r\n        .attr('stroke', 'steelblue')\r\n        .attr('stroke-width', '1.5')\r\n        .on(\"mouseover\", () => {\r\n          svg.append('text')\r\n            .attr(\"class\", \"title\")\r\n            .text(\"hans\")\r\n            .attr(\"x\", width/2)\r\n            .attr(\"y\", 5)\r\n        })\r\n        .on(\"mouseout\", () => {\r\n          svg.select(\".title\").remove()\r\n        })\r\n        \r\n      // add the dots  \r\n      svg.selectAll('.lineContainer').selectAll('circle')\r\n        .data(bufferline).enter()\r\n        .append('circle')\r\n        .attr('class', 'dot')\r\n        .attr('cx', d => x(d[0]))\r\n        .attr('cy', d => y(d[1]))\r\n        .attr('r', '3')\r\n        .attr('fill', 'steelblue')  \r\n\r\n    } \r\n    \r\n  }\r\n\r\n  render() {\r\n    return <svg></svg>\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}