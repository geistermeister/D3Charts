{"ast":null,"code":"import _classCallCheck from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\_dev\\\\React\\\\charts\\\\src\\\\Components\\\\barchart.jsx\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nvar LineCHart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LineCHart, _Component);\n\n  function LineCHart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LineCHart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LineCHart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.DrawChart = function () {\n      var margin = {\n        top: 20,\n        right: 30,\n        bottom: 45,\n        left: 50\n      };\n      var width = _this.props.width - margin.left - margin.right;\n      var height = _this.props.height - margin.top - margin.bottom;\n      var parseTime = d3.timeParse('%d.%m.%Y');\n      var data = _this.props.data.data;\n      var buffer = [];\n      data.forEach(function (d, i) {\n        buffer.push(Object.values(d)); // format the date string into date type\n\n        buffer[i][0] = parseTime(buffer[i][0]);\n\n        if (typeof buffer[i][1] != 'number') {\n          // number string into int\n          buffer[i][1] = parseInt(buffer[i][1]);\n        }\n      });\n      var x = d3.scale.ordinal().rangeRoundBands([0, width], .05).domain(data.map(function (d) {\n        return d.date;\n      }));\n      var y = d3.scale.linear().range([height, 0]).domain([0, d3.max(data, function (d) {\n        return d.value;\n      })]);\n      var xAxis = d3.axisBottom(x).tickFormat(d3.time.format(\"%d.%m.%Y\"));\n      var yAxis = d3.axisLeft(y).ticks(10); // manipulate svg and create group\n\n      var svg = d3.select('svg').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', \"translate(\".concat(margin.left, \",\").concat(margin.top, \")\"));\n      svg.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0,\" + height + \")\").call(xAxis).selectAll(\"text\").style(\"text-anchor\", \"end\").attr(\"dx\", \"-.8em\").attr(\"dy\", \"-.55em\").attr(\"transform\", \"rotate(-90)\");\n      svg.append(\"g\").attr(\"class\", \"y axis\").call(yAxis).append(\"text\").attr(\"transform\", \"rotate(-90)\").attr(\"y\", 6).attr(\"dy\", \".71em\").style(\"text-anchor\", \"end\").text(\"Value ($)\");\n      svg.selectAll(\"bar\").data(data).enter().append(\"rect\").style(\"fill\", \"steelblue\").attr(\"x\", function (d) {\n        return x(d.date);\n      }).attr(\"width\", x.rangeBand()).attr(\"y\", function (d) {\n        return y(d.value);\n      }).attr(\"height\", function (d) {\n        return height - y(d.value);\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(LineCHart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.DrawChart();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"svg\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return LineCHart;\n}(Component);\n\nexport { LineCHart as default };","map":{"version":3,"sources":["C:\\_dev\\React\\charts\\src\\Components\\barchart.jsx"],"names":["React","Component","d3","LineCHart","DrawChart","margin","top","right","bottom","left","width","props","height","parseTime","timeParse","data","buffer","forEach","d","i","push","Object","values","parseInt","x","scale","ordinal","rangeRoundBands","domain","map","date","y","linear","range","max","value","xAxis","axisBottom","tickFormat","time","format","yAxis","axisLeft","ticks","svg","select","attr","append","call","selectAll","style","text","enter","rangeBand"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport * as d3 from 'd3'\r\n\r\nexport default class LineCHart extends Component {\r\n\r\n  componentDidMount() {\r\n    this.DrawChart()\r\n  }\r\n\r\n  DrawChart = () => {\r\n    const margin = {top: 20, right: 30, bottom: 45, left: 50}\r\n    const width = this.props.width - margin.left - margin.right\r\n    const height = this.props.height - margin.top - margin.bottom\r\n    let parseTime = d3.timeParse('%d.%m.%Y')\r\n    let data = this.props.data.data\r\n    let buffer = []\r\n\r\n    data.forEach((d,i) => {\r\n      buffer.push(Object.values(d))\r\n      // format the date string into date type\r\n      buffer[i][0] = parseTime(buffer[i][0])\r\n      if(typeof buffer[i][1] != 'number'){\r\n        // number string into int\r\n        buffer[i][1] = parseInt(buffer[i][1])\r\n      }\r\n    })\r\n\r\n    let x = d3.scale\r\n      .ordinal()\r\n      .rangeRoundBands([0, width], .05)\r\n      .domain(data.map(d => d.date))\r\n    let y = d3.scale\r\n      .linear()\r\n      .range([height, 0])\r\n      .domain([0, d3.max(data, d => d.value)])\r\n\r\n    var xAxis = d3.axisBottom(x)\r\n      .tickFormat(d3.time.format(\"%d.%m.%Y\"));\r\n\r\n    var yAxis = d3.axisLeft(y)\r\n    .ticks(10);\r\n\r\n    // manipulate svg and create group\r\n    let svg = d3.select('svg')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform',\r\n            `translate(${margin.left},${margin.top})`)\r\n  \r\n    svg.append(\"g\")\r\n      .attr(\"class\", \"x axis\")\r\n      .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n      .call(xAxis)\r\n      .selectAll(\"text\")\r\n      .style(\"text-anchor\", \"end\")\r\n      .attr(\"dx\", \"-.8em\")\r\n      .attr(\"dy\", \"-.55em\")\r\n      .attr(\"transform\", \"rotate(-90)\" );\r\n  \r\n    svg.append(\"g\")\r\n      .attr(\"class\", \"y axis\")\r\n      .call(yAxis)\r\n      .append(\"text\")\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .attr(\"y\", 6)\r\n      .attr(\"dy\", \".71em\")\r\n      .style(\"text-anchor\", \"end\")\r\n      .text(\"Value ($)\");\r\n  \r\n    svg.selectAll(\"bar\")\r\n      .data(data)\r\n      .enter().append(\"rect\")\r\n      .style(\"fill\", \"steelblue\")\r\n      .attr(\"x\",d => x(d.date))\r\n      .attr(\"width\", x.rangeBand())\r\n      .attr(\"y\", function(d) { return y(d.value); })\r\n      .attr(\"height\", d => height - y(d.value));\r\n  }\r\n\r\n  render() {\r\n    return <svg></svg>\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}