{"ast":null,"code":"import _classCallCheck from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\_dev\\\\React\\\\charts\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\_dev\\\\React\\\\charts\\\\src\\\\Components\\\\barchart.jsx\";\nimport React, { Component } from 'react';\nimport * as d3 from 'd3';\n\nvar LineCHart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(LineCHart, _Component);\n\n  function LineCHart() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LineCHart);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LineCHart)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.DrawChart = function () {\n      var margin = {\n        top: 20,\n        right: 30,\n        bottom: 45,\n        left: 50\n      };\n      var width = _this.props.width - margin.left - margin.right;\n      var height = _this.props.height - margin.top - margin.bottom;\n      var parseTime = d3.timeParse('%d.%m.%Y');\n      var data = _this.props.data.data;\n      var buffer = [];\n      data.forEach(function (d, i) {\n        buffer.push(Object.values(d)); // format the date string into date type\n\n        buffer[i][0] = parseTime(buffer[i][0]);\n\n        if (typeof buffer[i][1] != 'number') {\n          // number string into int\n          buffer[i][1] = parseInt(buffer[i][1]);\n        }\n      }); // let x = d3.scaleOrdinal()\n      //   .range([0, width], .05)\n      //   .domain(data.map(d => d.date))\n      // let y = d3.scaleLinear()\n      //   .range([height, 0])\n      //   .domain([0, d3.max(data, d => d.value)])\n      // var xAxis = d3.axisBottom(x)\n      //   .tickFormat(d3.timeFormat(\"%d.%m.%Y\"))\n      // var yAxis = d3.axisLeft(y)\n      //   .ticks(10)\n\n      var x = d3.scaleTime().domain(d3.extent(buffer, function (d) {\n        return d[0];\n      })).range([0, width]);\n      var y = d3.scaleLinear().domain([0, function (d) {\n        return d3.max(d[1]);\n      }]).range([height, 0]); // manipulate svg and create group\n\n      var svg = d3.select('.svgBarChart').attr('width', width + margin.left + margin.right).attr('height', height + margin.top + margin.bottom).append('g').attr('transform', \"translate(\".concat(margin.left, \",\").concat(margin.top, \")\")); // add the x axis\n\n      svg.append('g').attr('transform', \"translate(0,\".concat(height, \")\")).call(d3.axisBottom(x).tickFormat(d3.timeFormat('%d.%m.%Y'))).selectAll('text').attr(\"transform\", \"rotate(-90)\").style(\"text-anchor\", \"end\"); // add the y axis\n\n      svg.append('g').call(d3.axisLeft(y)); // svg.append(\"g\")\n      //   .attr(\"class\", \"x axis\")\n      //   .attr(\"transform\", \"translate(0,\" + height + \")\")\n      //   .call(xAxis)\n      //   .selectAll(\"text\")\n      //   .style(\"text-anchor\", \"end\")\n      //   .attr(\"dx\", \"-.8em\")\n      //   .attr(\"dy\", \"-.55em\")\n      //   .attr(\"transform\", \"rotate(-90)\" );\n      // svg.append(\"g\")\n      //   .attr(\"class\", \"y axis\")\n      //   .call(yAxis)\n      //   .append(\"text\")\n      //   .attr(\"transform\", \"rotate(-90)\")\n      //   .attr(\"y\", 6)\n      //   .attr(\"dy\", \".71em\")\n      //   .style(\"text-anchor\", \"end\")\n      //   .text(\"Value ($)\");\n      // svg.selectAll(\"bar\")\n      //   .data(data)\n      //   .enter().append(\"rect\")\n      //   .style(\"fill\", \"steelblue\")\n      //   .attr(\"x\",d => x(d.date))\n      //   .attr(\"width\", x.range())\n      //   .attr(\"y\", d => y(d.value) )\n      //   .attr(\"height\", d => height - y(d.value))\n    };\n\n    return _this;\n  }\n\n  _createClass(LineCHart, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.DrawChart();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"svg\", {\n        className: \"svgBarChart\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      });\n    }\n  }]);\n\n  return LineCHart;\n}(Component);\n\nexport { LineCHart as default };","map":{"version":3,"sources":["C:\\_dev\\React\\charts\\src\\Components\\barchart.jsx"],"names":["React","Component","d3","LineCHart","DrawChart","margin","top","right","bottom","left","width","props","height","parseTime","timeParse","data","buffer","forEach","d","i","push","Object","values","parseInt","x","scaleTime","domain","extent","range","y","scaleLinear","max","svg","select","attr","append","call","axisBottom","tickFormat","timeFormat","selectAll","style","axisLeft"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport * as d3 from 'd3'\r\n\r\nexport default class LineCHart extends Component {\r\n\r\n  componentDidMount() {\r\n    this.DrawChart()\r\n  }\r\n\r\n  DrawChart = () => {\r\n    const margin = {top: 20, right: 30, bottom: 45, left: 50}\r\n    const width = this.props.width - margin.left - margin.right\r\n    const height = this.props.height - margin.top - margin.bottom\r\n    let parseTime = d3.timeParse('%d.%m.%Y')\r\n    let data = this.props.data.data\r\n    let buffer = []\r\n\r\n    data.forEach((d,i) => {\r\n      buffer.push(Object.values(d))\r\n      // format the date string into date type\r\n      buffer[i][0] = parseTime(buffer[i][0])\r\n      if(typeof buffer[i][1] != 'number'){\r\n        // number string into int\r\n        buffer[i][1] = parseInt(buffer[i][1])\r\n      }\r\n    })\r\n\r\n    // let x = d3.scaleOrdinal()\r\n    //   .range([0, width], .05)\r\n    //   .domain(data.map(d => d.date))\r\n\r\n    // let y = d3.scaleLinear()\r\n    //   .range([height, 0])\r\n    //   .domain([0, d3.max(data, d => d.value)])\r\n\r\n    // var xAxis = d3.axisBottom(x)\r\n    //   .tickFormat(d3.timeFormat(\"%d.%m.%Y\"))\r\n\r\n    // var yAxis = d3.axisLeft(y)\r\n    //   .ticks(10)\r\n\r\n    let x = d3.scaleTime()\r\n      .domain(d3.extent(buffer, d => d[0]))\r\n      .range([0, width])\r\n\r\n\r\n    let y = d3.scaleLinear()\r\n      .domain([0,d => d3.max(d[1])])\r\n      .range([height, 0])\r\n\r\n\r\n    // manipulate svg and create group\r\n    let svg = d3.select('.svgBarChart')\r\n      .attr('width', width + margin.left + margin.right)\r\n      .attr('height', height + margin.top + margin.bottom)\r\n      .append('g')\r\n      .attr('transform',\r\n            `translate(${margin.left},${margin.top})`)\r\n\r\n    // add the x axis\r\n    svg.append('g')\r\n      .attr('transform', `translate(0,${height})`)\r\n      .call(d3.axisBottom(x).tickFormat(d3.timeFormat('%d.%m.%Y')))\r\n      .selectAll('text')\r\n      .attr(\"transform\", \"rotate(-90)\")\r\n      .style(\"text-anchor\", \"end\")\r\n\r\n   // add the y axis\r\n   svg.append('g')\r\n     .call(d3.axisLeft(y))\r\n  \r\n    // svg.append(\"g\")\r\n    //   .attr(\"class\", \"x axis\")\r\n    //   .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n    //   .call(xAxis)\r\n    //   .selectAll(\"text\")\r\n    //   .style(\"text-anchor\", \"end\")\r\n    //   .attr(\"dx\", \"-.8em\")\r\n    //   .attr(\"dy\", \"-.55em\")\r\n    //   .attr(\"transform\", \"rotate(-90)\" );\r\n  \r\n    // svg.append(\"g\")\r\n    //   .attr(\"class\", \"y axis\")\r\n    //   .call(yAxis)\r\n    //   .append(\"text\")\r\n    //   .attr(\"transform\", \"rotate(-90)\")\r\n    //   .attr(\"y\", 6)\r\n    //   .attr(\"dy\", \".71em\")\r\n    //   .style(\"text-anchor\", \"end\")\r\n    //   .text(\"Value ($)\");\r\n  \r\n    // svg.selectAll(\"bar\")\r\n    //   .data(data)\r\n    //   .enter().append(\"rect\")\r\n    //   .style(\"fill\", \"steelblue\")\r\n    //   .attr(\"x\",d => x(d.date))\r\n    //   .attr(\"width\", x.range())\r\n    //   .attr(\"y\", d => y(d.value) )\r\n    //   .attr(\"height\", d => height - y(d.value))\r\n  }\r\n\r\n  render() {\r\n    return <svg className=\"svgBarChart\"></svg>\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}